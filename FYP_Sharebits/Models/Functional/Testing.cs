// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using FYP_Sharebits.Models.Functional;
//
//    var testing = Testing.FromJson(jsonString);

namespace FYP_Sharebits.Models.Functional
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class Testing
    {
        [JsonProperty("data")]
        public Data Data { get; set; }

        [JsonProperty("errors")]
        public Errors[] Errors { get; set; }
    }

    public partial class Data
    {
        [JsonProperty("HabitPlan")]
        public HabitPlan[] HabitPlan { get; set; }
    }

    public partial class HabitPlan
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("habitName")]
        public string HabitName { get; set; }

        [JsonProperty("habitType")]
        public string HabitType { get; set; }

        [JsonProperty("startDate")]
        public DateTimeOffset StartDate { get; set; }

        [JsonProperty("endDate")]
        public DateTimeOffset? EndDate { get; set; }

        [JsonProperty("createdItems")]
        public CreatedItem[] CreatedItems { get; set; }

        [JsonProperty("creator")]
        public Creator Creator { get; set; }
    }

    public partial class CreatedItem
    {
        [JsonProperty("_id")]
        public string Id { get; set; }

        [JsonProperty("itemType")]
        public string ItemType { get; set; }

        [JsonProperty("itemGoal")]
        public long ItemGoal { get; set; }

        [JsonProperty("createdRecords")]
        public CreatedRecord[] CreatedRecords { get; set; }
    }

    public partial class CreatedRecord
    {
        [JsonProperty("recordDate")]
        public DateTimeOffset RecordDate { get; set; }

        [JsonProperty("progress")]
        public long Progress { get; set; }

        [JsonProperty("isDone")]
        public bool IsDone { get; set; }
    }

    public partial class Creator
    {
        [JsonProperty("userName")]
        public string UserName { get; set; }

        [JsonProperty("password")]
        public string Password { get; set; }

        [JsonProperty("email")]
        public string Email { get; set; }

        [JsonProperty("height")]
        public double Height { get; set; }

        [JsonProperty("weight")]
        public double Weight { get; set; }
    }

    public partial class Errors
    {
        [JsonProperty("message")]
        public String Message { get; set; }
    }

    public partial class Testing
    {
        public static Testing FromJson(string json) => JsonConvert.DeserializeObject<Testing>(json, FYP_Sharebits.Models.Functional.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Testing self) => JsonConvert.SerializeObject(self, FYP_Sharebits.Models.Functional.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }
}
